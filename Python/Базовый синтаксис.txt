

Стандартные функции:
input(something) - считывает строку, something будет выведено на экран
hash(x) - возвращает хэш x
help(object) - вызов справки по объекту
id() - возвращат адрес объекта в памяти
len(x) - возвращает число элементов в объекте






Преобразования и типы данных:
bool(x) - возвращает True или False, проверяя x
bytearray(источник, кодировка, ошибки) - преобразование этой кодировки к bytearray.
bytes(источник, кодировка, ошибки) - преобразование к байтам (последовательность)
complex(real, imag) - преобразование к комплексному числу
dict(nyan) - преобразование в словарь
float() - преобразование к числу с плавающей точкой
set() - множество
frozenset() - неизменяемое множество
int() - к целому числу
list() - создать\преобразовать список
memoryview() - объект memoryview
object() - безликий объект, чисто название
range(i, n, k) - прогрессия, от i до n, с шагом в k
slice(i, n, k) - срез
str(источник, кодировка, ошибки) - превращение в строковую
tuple() - преобразование в кортеж
bin(x) - преобразование числа x в двоичную строку
globals() - словарь глобальных имен
hex(x) - преобразование целого числа в шеснадцатиричное
locals() - словарь локальных имен
oct(x) - в восьмеричное

Математические:
abs(x) - модуль числа
divmod(a, b) - возвращает частное и остаток от деления а на b
max(iter, args, key)
min(iter, args, key)
pow(x, y, l) = (x**y)%l
round(x, n) - округлить х до n знаков после запятой
sum(iter, start=0) - сумма членов последовательности начиная с нулевого


Булеановские:
all(x) - True если все элементы последовательности истинны
any(x) - если хотя бы один элемент последовательности истиннный 
callable(x) - возвращает True если объект поддерживает вызов функции
isinstance(object, Classinfo) - True если объект является Classinfo или подклассом
issubclass(класс, Classinfo) - то же самое, но класс будет считаться субклассом себя

Работа с буквенными ништяками:
chr(x) - возвращает символ, число которого в ascii равняется х
ord(x) - возвращает асци код символа



Неизвестные:
ascii() - возвращает ascii представление объекта
repr() - возвращает представление объекта
classmethod(x) - представляет указанную функцию методом класса
compile() - компилировать код\файл в код  который можно использовать в eval и exec
Возврат каретки?
delattr(object, name) - удаляет атрибут с именем name
dir(object) - список имен объекта или в локальной точке если объект не указан
eval(expression, globals=None, locals=None) - Выполняет строку программного кода
exec(object[, globals[, locals]]) - Выполняет программный код на Python
enumerate(iterable, start) - возвращает итератор, при каждом проходе возвращающий кортеж из номера и члена последовательности
filter(function, iterable) - возвращает итератор из тех значений, которые являются True
format(val, format_spec) - форматирование
getattr(object, name, def) - извлекает атрибут объекта или дефаулт если таковой отсутствует
hasattr(object, name) - имеет ли объект атрибут name
iter(х) - возвращает объект итератора
map(func, iterator) - итератор, получившийся после применения функции к каждому элементу последовательности
next(x) - следующий элемент итератора
open() - открывает файл и запускает его
reversed(x) - итератор из развернутого х
property(???)
setattr(объект, имя, значение) - устанавливает атрибут объекта
sorted(iterable, key, reverse=True) - отсортированный список
staticmethod(function) - статический метод для функции
super(тип, объект) - доступ к родительскому классу
type(object) - возвращает тип объекта
vars(объект) - словарь из атрибутов объекта
zip(*iters) - итератор, возвращающий кортежи, состоящие из элементов аргументов-последовательностей


Астериски:
Одинарный астериск перед именем превращает его (при присваивании информации) в список (tuple), тогда как двойной астериск - в словарь. То же самое может произойти при наличии в нем информации. Особенно часто используется при вызове функций. При написании функции астериск в объекте означает, что можно внести любое количество дополнительных позиций аргументов. Включает в себя такие понятия как *args - arguments; и **kwargs - key word arguments.


Lambda функции:
Это анонимные функции, по сути генераторы, которые объявляются без целого комплекса инструкций.
ФУНКЦИЯ=lambda аргументы: операции с аргументами
double = lambda x: x * 2

Лямбда может использоваться при вызове других функций, не прибегая к сложным инструкциям
new_list = list(filter(lambda x: (x%2 == 0) , my_list))

Используемая на месте лямбда имеет следующий вид:
lambda аргументы: функция, то что для аргументов


Сортировка:
sorted()
reversed=True
key - функция, которая становится ключом; может быть лямбда функция (используется для выбора конкретного параметра, по которому будет происходить сортировка)
operator: itemgetter (выбирает конкретное место вместо лямбда функции), attrgetter (по аттрибуту определенных присвоенных штук)
sorted(student_tuples, key=itemgetter(2))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
sorted(student_objects, key=attrgetter('age'))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
sorted(student_objects, key=attrgetter('grade', 'age'))
[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]
